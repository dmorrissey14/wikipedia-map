<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content="" />
    <meta name="author" content="" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="http://d3js.org/d3.v3.min.js"></script>
    <title>Wikipedia Map</title>

    <!-- Media elements: Bootstrap nav collapses after a certain width
                         Font changes after a certain width is reached
                         Paragraph will hide to simplify page on small screen -->
    <!-- Bootstrap Core CSS -->
    <link href="~/Vendor/style/bootstrap.min.css" rel="stylesheet" />
    <script src="~/Vendor/scripts/jquery-1.9.1.min.js"></script>
    <script src="~/Vendor/scripts/underscore-min.js"></script>
    <style>
        /*Tree Chart CSS*/
        .node {
            cursor: pointer;
        }

        .node circle {
            fill: #fff;
            stroke: steelblue;
            stroke-width: 1.5px;
        }
       
        .node text {
            font: 12px sans-serif;
        }

        .link {
            fill: none;
            stroke: #ccc;
            stroke-width: 1.5px;
        }
        #treeContainer{
            margin-left:auto;
            margin-right:auto;
            width:80%;
        }
        /*Nav/Search bar CSS*/
        #custom-search-input {
            margin:0;
            margin-top: 10px;
            padding: 0;
        }
        #custom-search-input .search-query {
            padding-right: 3px;
            padding-right: 4px \9;
            padding-left: 3px;
            padding-left: 4px \9;
            /* IE7-8 doesn't have border-radius, so don't indent the padding */
            margin-bottom: 0;
            -webkit-border-radius: 3px;
            -moz-border-radius: 3px;
            border-radius: 3px;
        }
        #custom-search-input button {
            border: 0;
            background: none;
            /** belows styles are working good */
            padding: 2px 5px;
            margin-top: 2px;
            position: relative;
            left: -28px;
            /* IE7-8 doesn't have border-radius, so don't indent the padding */
            margin-bottom: 0;
            -webkit-border-radius: 3px;
            -moz-border-radius: 3px;
            border-radius: 3px;
            color:#D9230F;
        }
        .search-query:focus + button {
            z-index: 3;   
        }
        /*Info Box*/
        #infoBox{
            border:1px solid #33cccc;
            -webkit-box-shadow: -4px 5px 21px -5px rgba(0,0,0,0.75);
            -moz-box-shadow: -4px 5px 21px -5px rgba(0,0,0,0.75);
            box-shadow: -4px 5px 21px -5px rgba(0,0,0,0.75);
            width:800px;
            margin-top:50px;
            margin-right:auto;
            margin-left:auto;
            padding:15px;
        }
        #errorText{
            width:800px;
            margin-top:5px;
            margin-right:auto;
            margin-left:auto;
            padding:10px;
            color:#0066ff;
        }
        svg{
            display:block;
            width:800px;
            margin-left:auto;
            margin-right:auto;
        }
    </style>
</head>
<body>
    <!-- Nav Search -->
    <div class="container">
        <div class="row">
            <h2>Wikipedia Tree</h2>
            <div id="custom-search-input">
                <div class="input-group col-md-12">
                    <input type="text" class="search-query form-control" placeholder="Enter Starting Word" />
                    <span class="input-group-btn">
                        <button class="btn btn-danger" type="button">
                            <span class="glyphicon glyphicon-search"></span>
                        </button>
                    </span>
                </div>
            </div>
        </div>
    </div>
    <div id="errorText">

    </div>
    <div id="infoBox">
        <p>Welcome! Enter a word or phrase above and see graphically what pages link to it on Wikipedia!. Afterwards, 
        click on other words to see what pages link to those as well.</p>
    </div>
    <div id="treeContainer">
        <div id="target">
            <script>

                /*********** Global Variables/functions*************/
                var treeJSON;//for debugging what JSON looks like
                var rawJSON;//for passing into function
                var elementList = []; //don't add elements more than once to page

                //format of JSON required by Tidy Tree.
                //  {
                //      "name": "AUT-1",
                //      "children": [
                //          { "name" : "PUB-1" },
                //          { "name" : "PUB-2"}
                //  }

                //base object format
                function OutputFormat(name) {
                    this.name = name;
                    var children;
                }

                function formatJson(name, wikiArray) {
                    //remove words already displayed
                    wikiArray = cleanWikiList(wikiArray);

                    //first iteration
                    if ( typeof(rawJSON) == "undefined") {
                        var c1 = new OutputFormat(name);
                        c1.children = [];

                        wikiArray.forEach(function (element) {
                            var x = new OutputFormat(element);
                            c1.children.push(x);

                            elementList.push(element);
                        });
                        //treeJSON = JSON.stringify(c1);
                        rawJSON = c1;
                    } else {//subsequent iterations
                        var currentSelection = findChildElement(rawJSON, name);
                        
                        currentSelection.children = [];

                        for (var i = 0; i < wikiArray.length; i++) {
                            if (wikiArray[i] != name) {
                                var x = new OutputFormat(wikiArray[i]);
                                currentSelection.children.push(x);
                                elementList.push(wikiArray[i]);
                            }
                        }
                    }
                    console.log(elementList);
                }
                
                //find clicked node to add elements
                function findChildElement(mainJSON, _name) {
                    var result = null;
                    if (mainJSON instanceof Array) {
                        for (var i = 0; i < mainJSON.length; i++) {
                            result = findChildElement(mainJSON[i], _name);
                            if (result) {
                                break;
                            }
                        }
                    }
                    else {
                        for (var prop in mainJSON) {
                            if (prop == 'name') {
                                if (mainJSON[prop] == _name) {
                                    return mainJSON;
                                }
                            }
                            if ((mainJSON[prop] instanceof Object || mainJSON[prop] instanceof Array) && (prop == "children" || prop == "name")) {
                                result = findChildElement(mainJSON[prop], _name);
                                if (result) {
                                    break;
                                }
                            }
                        }
                    }
                    return result;
                }

                //don't display items more than once. Also remove pages with colon (they are index pages)
                function cleanWikiList(wikiList) {
                    for (var i = (wikiList.length -1 ); i >= 0; i--) {
                        if (($.inArray((wikiList[i]), elementList)) != -1) {
                            wikiList.splice(i, 1);
                        }
                        else if (wikiList[i].indexOf(":") > "-1") {
                            wikiList.splice(i, 1);
                        }
                    }
                    return wikiList;
                }

                    $(document).ready(function () {

                    /*********** Page Layout *************/
                        //Enter key or clicking icon submit requests
                        $("input.search-query").keypress(function (e) {
                            if ($(".search-query").val() == "") {
                                return;
                            }
                            if (e.which == 13) {//enter key is pressed
                                $(".btn").click();
                            }
                        });

                        $(".btn").on("click", function () {
                            $("#infoBox").hide();
                        });


                    /*********** Get Data and Format *************/

                        //first iteration --> user's first submitted word
                        $(".btn").on("click", function () {

                            if ($(".search-query").val() == "") {
                                return;
                            }

                            //Get new JSON
                            var userInput = $(".search-query").val();
                            
                            //clean input for a url, display
                            var clean1 = userInput.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, ""); //no punctuation
                            var displayClean = clean1.replace(/  +/g, ' ');
                            var submitClean = clean1.replace(/ +/g, "_");//replace whitespace with underscore
                            
                            if (typeof (rawJSON) == "undefined") {
                                $.ajax({
                                    type: "GET",
                                    async: true,
                                    beforeSend: function () {
                                        console.log("url: /index/" + submitClean);
                                    },
                                    url: "/index/" + submitClean,
                                    success: function (data) {
                                        $("#errorText").text("");

                                        if (data == "bad_path") {
                                            $("#errorText").text("Wikipedia page doesn't exist, please enter another word or phrase.");
                                            return;
                                        }

                                        $.when(formatJson(displayClean, data)).done(function () {
                                            drawTree(rawJSON);
                                        });

                                    },
                                    error: function (jqXHR, textStatus, errorThrown) {
                                        console.log("textStatus = " + textStatus + "errorThrown = " + errorThrown);
                                    },
                                    dataType: "json"
                                });
                            }
                        });
                    });

                   
                /*********** Vendor code, edited *************/
                    //https://gist.github.com/mbostock/4063550
                    //https://gist.github.com/HermanSontrop/8228664 --> modified version of radial tidy tree
                    //pubs is our formatted JSON for the tidy tree to draw
                    function drawTree(pubs) {
                        //original code see fiddle http://jsfiddle.net/Nivaldo/CbGh2/
                        var diameter = 800;

                        var margin = { top: 20, right: 120, bottom: 20, left: 120 },
                            width = diameter,
                            height = diameter;

                        var i = 0,
                            duration = 350,
                            root;

                        var tree = d3.layout.tree()
                        .size([360, diameter / 2 - 80])
                        .separation(function (a, b) { return (a.parent == b.parent ? 1 : 10) / a.depth; });

                        var diagonal = d3.svg.diagonal.radial()
                        .projection(function (d) { return [d.y, d.x / 180 * Math.PI]; });

                        var svg = d3.select("body").append("svg")
                        .attr("width", width)
                        .attr("height", height)
                        .append("g")
                        .attr("transform", "translate(" + diameter / 2 + "," + diameter / 2 + ")");

                        root = pubs;
                        root.x0 = height / 2;
                        root.y0 = 0;

                        //root.children.forEach(collapse); // start with all children collapsed
                        update(root);

                        d3.select(self.frameElement).style("height", "800px");

                        function update(source) {

                            // Compute the new tree layout.
                            var nodes = tree.nodes(root),
                                links = tree.links(nodes);

                            // Normalize for fixed-depth.
                            nodes.forEach(function (d) { d.y = d.depth * 80; });

                            // Update the nodes…
                            var node = svg.selectAll("g.node")
                            .data(nodes, function (d) { return d.id || (d.id = ++i); });

                            // Enter any new nodes at the parent's previous position.
                            var nodeEnter = node.enter().append("g")
                            .attr("class", "node")
                            //.attr("transform", function(d) { return "rotate(" + (d.x - 90) + ")translate(" + d.y + ")"; })
                            .on("click", d3click);

                            nodeEnter.append("circle")
                                .attr("r", 1e-6)
                                .style("fill", function (d) { return d._children ? "lightsteelblue" : "#fff"; });

                            nodeEnter.append("text")
                                .attr("x", 10)
                                .attr("dy", ".35em")
                                .attr("text-anchor", "start")
                            //.attr("transform", function(d) { return d.x < 180 ? "translate(0)" : "rotate(180)translate(-" + (d.name.length * 8.5)  + ")"; })
                                .text(function (d) { return d.name; })
                                .style("fill-opacity", 1e-6);

                            // Transition nodes to their new position.
                            var nodeUpdate = node.transition()
                            .duration(duration)
                            .attr("transform", function (d) { return "rotate(" + (d.x - 90) + ")translate(" + d.y + ")"; })

                            nodeUpdate.select("circle")
                                .attr("r", 4.5)
                                .style("fill", function (d) { return d._children ? "lightsteelblue" : "#fff"; });

                            nodeUpdate.select("text")
                                .style("fill-opacity", 1)
                                .attr("transform", function (d) { return d.x < 180 ? "translate(0)" : "rotate(180)translate(-" + (d.name.length + 50) + ")"; });

                            var nodeExit = node.exit().transition()
                            .duration(duration)
                            //.attr("transform", function(d) { return "diagonal(" + source.y + "," + source.x + ")"; })
                            .remove();

                            nodeExit.select("circle")
                                .attr("r", 1e-6);

                            nodeExit.select("text")
                                .style("fill-opacity", 1e-6);

                            // Update the links…
                            var link = svg.selectAll("path.link")
                            .data(links, function (d) { return d.target.id; });

                            // Enter any new links at the parent's previous position.
                            link.enter().insert("path", "g")
                                .attr("class", "link")
                                .attr("d", function (d) {
                                    var o = { x: source.x0, y: source.y0 };
                                    return diagonal({ source: o, target: o });
                                });

                            // Transition links to their new position.
                            link.transition()
                                .duration(duration)
                                .attr("d", diagonal);

                            // Transition exiting nodes to the parent's new position.
                            link.exit().transition()
                                .duration(duration)
                                .attr("d", function (d) {
                                    var o = { x: source.x, y: source.y };
                                    return diagonal({ source: o, target: o });
                                })
                                .remove();

                            // Stash the old positions for transition.
                            nodes.forEach(function (d) {
                                d.x0 = d.x;
                                d.y0 = d.y;
                            });
                        }

                        // Toggle children on click/grab new data
                        function d3click(d) {
                            if (d.children) { 
                                d._children = d.children;
                                d.children = null;
                                //console.log("d3click if");
                            } else if(d._children){
                                d.children = d._children;
                                d._children = null;
                                //console.log("d3 click else if");
                            } else {
                                var dcircle = $(this);
                                var txt = $(this).text();
                                

                                var clean1 = txt.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, ""); //no punctuation
                                var displayClean = clean1.replace(/  +/g, ' ');
                                var submitClean = clean1.replace(/ +/g, "_");//replace whitespace with underscore

                                $.ajax({
                                    type: "GET",
                                    async: true,
                                    beforeSend: function () {
                                        console.log("/index/" + submitClean);
                                    },
                                    url: "/index/" + submitClean,
                                    success: function (data) {
                                        $("#errorText").text("");

                                        //console.log("ajax successful");

                                        //console.log("name = " + displayClean);
                                        //console.log(data);

                                        if (data == "bad_path") {
                                            $("#errorText").text("Wikipedia page doesn't exist, please enter another word or phrase.");
                                            return;
                                        }
                                        //console.log(data);
                                        //console.log(rawJSON);
                                        data = cleanWikiList(data);
                                        
                                        $.when(formatJson(displayClean, data)).done(function () {
                                            console.log(rawJSON);
                                            update(d);
                                        });

                                    },
                                    error: function (jqXHR, textStatus, errorThrown) {
                                        console.log("textStatus = " + textStatus + "errorThrown = " + errorThrown);
                                    },
                                    dataType: "json"
                                });
                                //console.log("d3 click else");
                            }
                            update(d);
                        }

                        // Collapse nodes
                        function collapse(d) {
                            if (d.children) {
                                d._children = d.children;
                                d._children.forEach(collapse);
                                d.children = null;
                            }
                        }
                    }
            
            </script> <!--Script only works within div for some reason, reexamine later-->
        </div>
    </div>
</body>
</html>